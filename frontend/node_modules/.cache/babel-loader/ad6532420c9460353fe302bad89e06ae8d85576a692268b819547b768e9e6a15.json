{"ast":null,"code":"var _jsxFileName = \"/Users/glockstock/Projects/fantasy-football-roguelike/frontend/src/context/GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(undefined);\nexport const useGame = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n_s(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const GameProvider = ({\n  children,\n  gameState,\n  setGameState\n}) => {\n  _s2();\n  const [field, setField] = useState([]);\n  const [hand, setHand] = useState([]);\n  const [deckCards, setDeckCards] = useState([]);\n  const [discardPile, setDiscardPile] = useState([]);\n  const drawCards = async numCards => {\n    if (!gameState) return;\n    try {\n      const response = await fetch(`/api/game/${gameState.session_id}/draw-cards`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          num_cards: numCards\n        })\n      });\n      const result = await response.json();\n      setHand(result.hand);\n      setDeckCards(prev => prev.slice(numCards));\n    } catch (error) {\n      console.error('Failed to draw cards:', error);\n    }\n  };\n  const mulligan = async () => {\n    if (!gameState) return;\n    try {\n      const response = await fetch(`/api/game/${gameState.session_id}/mulligan`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const result = await response.json();\n      setHand(result.hand);\n      setDeckCards(prev => prev.slice(5));\n      setDiscardPile(prev => [...prev, ...hand]);\n    } catch (error) {\n      console.error('Failed to mulligan:', error);\n    }\n  };\n  const playCard = card => {\n    const newField = [...field, card];\n    setField(newField);\n\n    // Remove card from hand\n    setHand(prev => prev.filter(c => c.id !== card.id || c.type !== card.type));\n\n    // Check if this completes a drive (simplified logic)\n    if (card.type === 'play' && card.data.name.toLowerCase().includes('touchdown')) {\n      executeDrive(newField);\n    }\n  };\n  const executeDrive = async cards => {\n    if (!gameState) return;\n    const cardsToExecute = cards || field;\n    if (cardsToExecute.length === 0) return;\n    try {\n      const response = await fetch(`/api/game/${gameState.session_id}/play-drive`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cards: cardsToExecute\n        })\n      });\n      const result = await response.json();\n      if (result.drive_result.drive_successful) {\n        var _driveResult$multipli;\n        // Update game state with new progress\n        setGameState({\n          ...gameState,\n          score: gameState.score + result.drive_result.drive_score,\n          coaching_points: gameState.coaching_points + result.drive_result.drive_score,\n          game: result.next_game,\n          drive: result.next_drive,\n          game_progress: result.game_progress,\n          season_progress: result.season_progress\n        });\n\n        // Clear field and move cards to discard pile\n        setField([]);\n        setDiscardPile(prev => [...prev, ...cardsToExecute]);\n\n        // Show success message with drive details\n        const driveResult = result.drive_result;\n        alert(`Drive completed! +${driveResult.drive_score} points\\nYards: ${driveResult.yards_gained}\\nPoints: ${driveResult.points_scored}\\nMultiplier: ${(_driveResult$multipli = driveResult.multiplier) === null || _driveResult$multipli === void 0 ? void 0 : _driveResult$multipli.toFixed(1)}x`);\n\n        // Check for game/season completion\n        if (result.game_progress.current_game > gameState.game_progress.current_game) {\n          alert(`Game ${gameState.game_progress.current_game} won! Moving to Game ${result.game_progress.current_game}`);\n        }\n        if (result.season_progress.current_season > gameState.season_progress.current_season) {\n          alert(`Season ${gameState.season_progress.current_season} won! Moving to Season ${result.season_progress.current_season}`);\n        }\n        if (result.season_progress.seasons_won > gameState.season_progress.seasons_won) {\n          alert(`🏆 CHAMPIONSHIP WON! You've completed all ${result.season_progress.total_seasons} seasons!`);\n        }\n      } else {\n        if (result.drive_result.turnover) {\n          alert('TURNOVER! Drive failed due to defensive pressure.');\n        } else {\n          alert('Drive failed! You need to gain at least 10 yards or score points.');\n        }\n        setField([]);\n        setDiscardPile(prev => [...prev, ...cardsToExecute]);\n      }\n    } catch (error) {\n      console.error('Failed to execute drive:', error);\n    }\n  };\n  const value = {\n    gameState,\n    setGameState,\n    field,\n    setField,\n    playCard,\n    executeDrive,\n    drawCards,\n    mulligan,\n    hand,\n    deckCards,\n    discardPile\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"jJtUl2HtWE6ntTboCuiQ5mZxRNg=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","GameContext","undefined","useGame","_s","context","Error","GameProvider","children","gameState","setGameState","_s2","field","setField","hand","setHand","deckCards","setDeckCards","discardPile","setDiscardPile","drawCards","numCards","response","fetch","session_id","method","headers","body","JSON","stringify","num_cards","result","json","prev","slice","error","console","mulligan","playCard","card","newField","filter","c","id","type","data","name","toLowerCase","includes","executeDrive","cards","cardsToExecute","length","drive_result","drive_successful","_driveResult$multipli","score","drive_score","coaching_points","game","next_game","drive","next_drive","game_progress","season_progress","driveResult","alert","yards_gained","points_scored","multiplier","toFixed","current_game","current_season","seasons_won","total_seasons","turnover","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/glockstock/Projects/fantasy-football-roguelike/frontend/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, ReactNode, useState } from 'react';\nimport { GameState, Card, Play } from '../types/game';\n\ninterface GameContextType {\n  gameState: GameState | null;\n  setGameState: (state: GameState | null) => void;\n  field: Card[];\n  setField: (cards: Card[]) => void;\n  playCard: (card: Card) => void;\n  executeDrive: () => Promise<void>;\n  drawCards: (numCards: number) => Promise<void>;\n  mulligan: () => Promise<void>;\n  hand: Card[];\n  deckCards: Card[];\n  discardPile: Card[];\n}\n\nconst GameContext = createContext<GameContextType | undefined>(undefined);\n\nexport const useGame = () => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n\ninterface GameProviderProps {\n  children: ReactNode;\n  gameState: GameState | null;\n  setGameState: (state: GameState | null) => void;\n}\n\nexport const GameProvider: React.FC<GameProviderProps> = ({ children, gameState, setGameState }) => {\n  const [field, setField] = useState<Card[]>([]);\n  const [hand, setHand] = useState<Card[]>([]);\n  const [deckCards, setDeckCards] = useState<Card[]>([]);\n  const [discardPile, setDiscardPile] = useState<Card[]>([]);\n\n  const drawCards = async (numCards: number) => {\n    if (!gameState) return;\n    \n    try {\n      const response = await fetch(`/api/game/${gameState.session_id}/draw-cards`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ num_cards: numCards }),\n      });\n      \n      const result = await response.json();\n      setHand(result.hand);\n      setDeckCards(prev => prev.slice(numCards));\n    } catch (error) {\n      console.error('Failed to draw cards:', error);\n    }\n  };\n\n  const mulligan = async () => {\n    if (!gameState) return;\n    \n    try {\n      const response = await fetch(`/api/game/${gameState.session_id}/mulligan`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      const result = await response.json();\n      setHand(result.hand);\n      setDeckCards(prev => prev.slice(5));\n      setDiscardPile(prev => [...prev, ...hand]);\n    } catch (error) {\n      console.error('Failed to mulligan:', error);\n    }\n  };\n\n  const playCard = (card: Card) => {\n    const newField = [...field, card];\n    setField(newField);\n    \n    // Remove card from hand\n    setHand(prev => prev.filter(c => c.id !== card.id || c.type !== card.type));\n\n    // Check if this completes a drive (simplified logic)\n    if (card.type === 'play' && (card.data as Play).name.toLowerCase().includes('touchdown')) {\n      executeDrive(newField);\n    }\n  };\n\n  const executeDrive = async (cards?: Card[]) => {\n    if (!gameState) return;\n\n    const cardsToExecute = cards || field;\n    if (cardsToExecute.length === 0) return;\n\n    try {\n      const response = await fetch(`/api/game/${gameState.session_id}/play-drive`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ cards: cardsToExecute }),\n      });\n\n      const result = await response.json();\n      \n      if (result.drive_result.drive_successful) {\n        // Update game state with new progress\n        setGameState({\n          ...gameState,\n          score: gameState.score + result.drive_result.drive_score,\n          coaching_points: gameState.coaching_points + result.drive_result.drive_score,\n          game: result.next_game,\n          drive: result.next_drive,\n          game_progress: result.game_progress,\n          season_progress: result.season_progress,\n        });\n        \n        // Clear field and move cards to discard pile\n        setField([]);\n        setDiscardPile(prev => [...prev, ...cardsToExecute]);\n        \n        // Show success message with drive details\n        const driveResult = result.drive_result;\n        alert(`Drive completed! +${driveResult.drive_score} points\\nYards: ${driveResult.yards_gained}\\nPoints: ${driveResult.points_scored}\\nMultiplier: ${driveResult.multiplier?.toFixed(1)}x`);\n        \n        // Check for game/season completion\n        if (result.game_progress.current_game > gameState.game_progress.current_game) {\n          alert(`Game ${gameState.game_progress.current_game} won! Moving to Game ${result.game_progress.current_game}`);\n        }\n        if (result.season_progress.current_season > gameState.season_progress.current_season) {\n          alert(`Season ${gameState.season_progress.current_season} won! Moving to Season ${result.season_progress.current_season}`);\n        }\n        if (result.season_progress.seasons_won > gameState.season_progress.seasons_won) {\n          alert(`🏆 CHAMPIONSHIP WON! You've completed all ${result.season_progress.total_seasons} seasons!`);\n        }\n      } else {\n        if (result.drive_result.turnover) {\n          alert('TURNOVER! Drive failed due to defensive pressure.');\n        } else {\n          alert('Drive failed! You need to gain at least 10 yards or score points.');\n        }\n        setField([]);\n        setDiscardPile(prev => [...prev, ...cardsToExecute]);\n      }\n    } catch (error) {\n      console.error('Failed to execute drive:', error);\n    }\n  };\n\n  const value: GameContextType = {\n    gameState,\n    setGameState,\n    field,\n    setField,\n    playCard,\n    executeDrive,\n    drawCards,\n    mulligan,\n    hand,\n    deckCards,\n    discardPile,\n  };\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}