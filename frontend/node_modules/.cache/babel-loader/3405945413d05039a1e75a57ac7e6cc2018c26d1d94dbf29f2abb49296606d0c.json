{"ast":null,"code":"var _jsxFileName = \"/Users/glockstock/Projects/fantasy-football-roguelike/frontend/src/context/GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext(undefined);\nexport const useGame = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n_s(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const GameProvider = ({\n  children,\n  gameState,\n  setGameState\n}) => {\n  _s2();\n  const [field, setField] = useState([]);\n  const playCard = card => {\n    const newField = [...field, card];\n    setField(newField);\n\n    // Check if this completes a drive (simplified logic)\n    if (card.type === 'play' && card.data.name.toLowerCase().includes('touchdown')) {\n      executeDrive(newField);\n    }\n  };\n  const executeDrive = async cards => {\n    if (!gameState) return;\n    const cardsToExecute = cards || field;\n    if (cardsToExecute.length === 0) return;\n    try {\n      const response = await fetch(`/api/game/${gameState.session_id}/play-drive`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cards: cardsToExecute\n        })\n      });\n      const result = await response.json();\n      if (result.drive_result.drive_successful) {\n        // Update game state with new progress\n        setGameState({\n          ...gameState,\n          score: gameState.score + result.drive_result.drive_score,\n          game: result.next_game,\n          drive: result.next_drive,\n          game_progress: result.game_progress,\n          season_progress: result.season_progress\n        });\n\n        // Clear field\n        setField([]);\n\n        // Show success message with drive details\n        const driveResult = result.drive_result;\n        alert(`Drive completed! +${driveResult.drive_score} points\\nYards: ${driveResult.yards_gained}\\nPoints: ${driveResult.points_scored}`);\n\n        // Check for game/season completion\n        if (result.game_progress.current_game > gameState.game_progress.current_game) {\n          alert(`Game ${gameState.game_progress.current_game} won! Moving to Game ${result.game_progress.current_game}`);\n        }\n        if (result.season_progress.current_season > gameState.season_progress.current_season) {\n          alert(`Season ${gameState.season_progress.current_season} won! Moving to Season ${result.season_progress.current_season}`);\n        }\n        if (result.season_progress.seasons_won > gameState.season_progress.seasons_won) {\n          alert(`üèÜ CHAMPIONSHIP WON! You've completed all ${result.season_progress.total_seasons} seasons!`);\n        }\n      } else {\n        alert('Drive failed! You need to gain at least 10 yards or score points.');\n        setField([]);\n      }\n    } catch (error) {\n      console.error('Failed to execute drive:', error);\n    }\n  };\n  const value = {\n    gameState,\n    setGameState,\n    field,\n    setField,\n    playCard,\n    executeDrive\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"5BgihhjzBvCytWk9hx2bNKnEnh0=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","GameContext","undefined","useGame","_s","context","Error","GameProvider","children","gameState","setGameState","_s2","field","setField","playCard","card","newField","type","data","name","toLowerCase","includes","executeDrive","cards","cardsToExecute","length","response","fetch","session_id","method","headers","body","JSON","stringify","result","json","drive_result","drive_successful","score","drive_score","game","next_game","drive","next_drive","game_progress","season_progress","driveResult","alert","yards_gained","points_scored","current_game","current_season","seasons_won","total_seasons","error","console","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/glockstock/Projects/fantasy-football-roguelike/frontend/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, ReactNode, useState } from 'react';\nimport { GameState, Card, Play } from '../types/game';\n\ninterface GameContextType {\n  gameState: GameState | null;\n  setGameState: (state: GameState | null) => void;\n  field: Card[];\n  setField: (cards: Card[]) => void;\n  playCard: (card: Card) => void;\n  executeDrive: () => Promise<void>;\n  drawCards: (numCards: number) => Promise<void>;\n  mulligan: () => Promise<void>;\n  hand: Card[];\n  deckCards: Card[];\n  discardPile: Card[];\n}\n\nconst GameContext = createContext<GameContextType | undefined>(undefined);\n\nexport const useGame = () => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n\ninterface GameProviderProps {\n  children: ReactNode;\n  gameState: GameState | null;\n  setGameState: (state: GameState | null) => void;\n}\n\nexport const GameProvider: React.FC<GameProviderProps> = ({ children, gameState, setGameState }) => {\n  const [field, setField] = useState<Card[]>([]);\n\n  const playCard = (card: Card) => {\n    const newField = [...field, card];\n    setField(newField);\n\n    // Check if this completes a drive (simplified logic)\n    if (card.type === 'play' && (card.data as Play).name.toLowerCase().includes('touchdown')) {\n      executeDrive(newField);\n    }\n  };\n\n  const executeDrive = async (cards?: Card[]) => {\n    if (!gameState) return;\n\n    const cardsToExecute = cards || field;\n    if (cardsToExecute.length === 0) return;\n\n    try {\n      const response = await fetch(`/api/game/${gameState.session_id}/play-drive`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ cards: cardsToExecute }),\n      });\n\n      const result = await response.json();\n      \n      if (result.drive_result.drive_successful) {\n        // Update game state with new progress\n        setGameState({\n          ...gameState,\n          score: gameState.score + result.drive_result.drive_score,\n          game: result.next_game,\n          drive: result.next_drive,\n          game_progress: result.game_progress,\n          season_progress: result.season_progress,\n        });\n        \n        // Clear field\n        setField([]);\n        \n        // Show success message with drive details\n        const driveResult = result.drive_result;\n        alert(`Drive completed! +${driveResult.drive_score} points\\nYards: ${driveResult.yards_gained}\\nPoints: ${driveResult.points_scored}`);\n        \n        // Check for game/season completion\n        if (result.game_progress.current_game > gameState.game_progress.current_game) {\n          alert(`Game ${gameState.game_progress.current_game} won! Moving to Game ${result.game_progress.current_game}`);\n        }\n        if (result.season_progress.current_season > gameState.season_progress.current_season) {\n          alert(`Season ${gameState.season_progress.current_season} won! Moving to Season ${result.season_progress.current_season}`);\n        }\n        if (result.season_progress.seasons_won > gameState.season_progress.seasons_won) {\n          alert(`üèÜ CHAMPIONSHIP WON! You've completed all ${result.season_progress.total_seasons} seasons!`);\n        }\n      } else {\n        alert('Drive failed! You need to gain at least 10 yards or score points.');\n        setField([]);\n      }\n    } catch (error) {\n      console.error('Failed to execute drive:', error);\n    }\n  };\n\n  const value: GameContextType = {\n    gameState,\n    setGameState,\n    field,\n    setField,\n    playCard,\n    executeDrive,\n  };\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}